@using Folly.Extensions
@using Folly.Resources
@using Folly.Models
@using Folly.Services
@using System.Globalization
@model User
@inject IRoleService _RoleService
@inject ILanguageService _LanguageService

<content>
    <breadcrumb>
        <breadcrumb-item label="@Users.ViewAll" controller="User" action="Index" />
        <breadcrumb-item label="@(Model.IsCreate ? Users.CreateUser : Users.EditUser)" controller="User" action="@(Model.IsCreate ? "Create" : "Edit")"
            route-values="@(Model.IsCreate ? null : new { Id = Model.Id })" active="true"
        />
    </breadcrumb>

    @if (Model.IsCreate) {
        <partial name="_Alert" model="new Alert { Content = @Users.ExplainCreate }" />
    }

    <partial name="_Alerts" />

    <form-content for="Model" action="@(Model.IsCreate ? "Create" : "Edit")">
        <input asp-for="Id" type="hidden" />

        <input-group for="FirstName" autofocus />
        <input-group for="LastName" />
        <input-group for="UserName" />
        <input-group for="Email" />
        <select-group for="LanguageId" options="@(await _LanguageService.GetAllLanguagesAsync()).ToSelectList(x => x.Name, x => x.Id.ToString(CultureInfo.InvariantCulture))" />

        <div class="mb-1">
            <label asp-for="RoleIds">@Users.Roles</label>
            @{
                var roles = await _RoleService.GetAllRolesAsync();
                foreach (var role in roles)
                {
                    <form-checkbox name="RoleIds" value="@role.Id" label="@role.Name" checked="@Model.RoleIds?.Contains(role.Id) == true" />
                }
            }
        </div>

        <input class="button primary" type="submit" value="@Core.Save">
    </form-content>
</content>
